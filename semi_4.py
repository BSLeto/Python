# 1. Задайте строку из набора чисел. 
# Напишите программу, которая покажет большее и меньшее число.
# В качестве символа-разделителя используйте пробел.
# ===========================================================================================================================================================

# my_list = []

# my_list = input("Введите числа через пробел: ").split()

# res_list = [int(elem) for elem in my_list if elem.isdigit()]

# print(f'max Value = {max(res_list)}, min Value = {min(res_list)}')
    



# 2. Найдите корни квадратного уравнения Ax² + Bx + C = 0 двумя способами:
# 1) с помощью математических формул нахождения корней квадратного уравнения

# A = int(input('Введите число A: '))
# B = int(input('Введите число B: '))
# C = int(input('Введите число C: '))

# D = B**2 - 4*A*C
# print (f'D = {D}')
# if D < 0: print('Корней нет!!!')
# elif D == 0:
#     X = (-B)/(2*A)
#     print(f'X = {X}')
# elif D > 0:
#     X1 = ((-B) + (D**(0.5)))/(2*A)
#     X2 = ((-B) - (D**(0.5)))/(2*A)
#     print(f'X1 = {X1} and X2 = {X2}')
# =================================================================


# 2) с помощью дополнительных библиотек Python

# import math
 
# print("Введите коэффициенты для уравнения")
# print("ax^2 + bx + c = 0:")
# a = float(input("a = "))
# b = float(input("b = "))
# c = float(input("c = "))
 
# discr = pow(b, 2) - 4 * a * c
# print("Дискриминант D = %.2f" % discr)
 
# if discr > 0:
#     x1 = (-b + math.sqrt(discr)) / (2 * a)
#     x2 = (-b - math.sqrt(discr)) / (2 * a)
#     print("x1 = %.2f \nx2 = %.2f" % (x1, x2))
# elif discr == 0:
#     x = -b / (2 * a)
#     print("x = %.2f" % x)
# else:
#     print("Корней нет")

# ===========================================================================================================================================================

# 3. Задайте два числа. 
# Напишите программу, которая найдёт НОК (наименьшее общее кратное) этих двух чисел.

import math
n = int(input('Введите первое число: '))
m = int(input('Введите второе число: '))

print((n * m) // math.gcd(n , m))